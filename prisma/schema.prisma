generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                 Int     @id @default(autoincrement())
    userId             Int     @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique @map("session_token")
    userId       Int      @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id               Int                @id @default(autoincrement())
    isAdmin          Boolean            @default(false) @map("is_admin")
    name             String?
    email            String?            @unique
    emailVerified    DateTime?          @map("email_verified")
    image            String?
    createdAt        DateTime           @default(now()) @map(name: "created_at")
    updatedAt        DateTime           @updatedAt @map(name: "updated_at")
    apiToken         String?            @unique @map("api_token")
    accounts         Account[]
    sessions         Session[]
    Devide           Device[]
    MutedApplication MutedApplication[]
    Notification     Notification[]
    Application      Application[]

    @@map(name: "users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Device {
    id           Int            @id @default(autoincrement())
    name         String
    type         String
    deiceId      String         @map("device_id")
    userId       Int            @map("user_id")
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    Notification Notification[]

    @@map("devices")
}

model Application {
    id               Int                @id @default(autoincrement())
    applicationName  String             @map("application_name")
    packageName      String             @map("package_name")
    userId           Int                @map("user_id")
    user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    MutedApplication MutedApplication[]

    @@map("applications")
}

model MutedApplication {
    id            Int         @id @default(autoincrement())
    userId        Int         @map("user_id")
    isMuted       Boolean     @map("is_muted")
    applicationId Int         @map("application_id")
    application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("mutedapplications")
}

model Notification {
    id        Int      @id @default(autoincrement())
    userId    Int      @map("user_id")
    devideId  Int      @map("device_id")
    title     String
    content   String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    devide    Device   @relation(fields: [devideId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("notifications")
}
